// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Turbo.Database.Context;

#nullable disable

namespace Turbo.Main.Migrations
{
    [DbContext(typeof(TurboContext))]
    partial class TurboContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Turbo.Database.Entities.Furniture.FurnitureDefinitionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("CanGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_group")
                        .HasDefaultValueSql("1");

                    b.Property<bool?>("CanLay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_lay")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("CanRecycle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_recycle")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("CanSell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_sell")
                        .HasDefaultValueSql("1");

                    b.Property<bool?>("CanSit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_sit")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("CanStack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_stack")
                        .HasDefaultValueSql("1");

                    b.Property<bool?>("CanTrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_trade")
                        .HasDefaultValueSql("1");

                    b.Property<bool?>("CanWalk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_walk")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<string>("ExtraData")
                        .HasColumnType("longtext")
                        .HasColumnName("extra_data");

                    b.Property<string>("Logic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasColumnName("logic")
                        .HasDefaultValueSql("'default'");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("product_name");

                    b.Property<string>("PublicName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("public_name");

                    b.Property<int>("SpriteId")
                        .HasColumnType("int")
                        .HasColumnName("sprite_id");

                    b.Property<int>("TotalStates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("total_states")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'s'");

                    b.Property<int>("UsagePolicy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("usage_policy")
                        .HasDefaultValueSql("1");

                    b.Property<int>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("x")
                        .HasDefaultValueSql("1");

                    b.Property<int>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("y")
                        .HasDefaultValueSql("1");

                    b.Property<double>("Z")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double(10,3)")
                        .HasColumnName("z")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("SpriteId", "Type")
                        .IsUnique();

                    b.ToTable("furniture_definitions");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Furniture.FurnitureEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<int>("FurnitureDefinitionEntityId")
                        .HasColumnType("int")
                        .HasColumnName("definition_id");

                    b.Property<int>("PlayerEntityId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int?>("RoomEntityId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<int>("Rotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("direction")
                        .HasDefaultValueSql("0");

                    b.Property<string>("StuffData")
                        .HasColumnType("longtext")
                        .HasColumnName("stuff_data");

                    b.Property<string>("WallPosition")
                        .HasColumnType("longtext")
                        .HasColumnName("wall_position");

                    b.Property<string>("WiredData")
                        .HasColumnType("longtext")
                        .HasColumnName("wired_data");

                    b.Property<int>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("x")
                        .HasDefaultValueSql("0");

                    b.Property<int>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("y")
                        .HasDefaultValueSql("0");

                    b.Property<double>("Z")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double(10,3)")
                        .HasColumnName("z")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("FurnitureDefinitionEntityId");

                    b.HasIndex("PlayerEntityId");

                    b.HasIndex("RoomEntityId");

                    b.ToTable("furniture");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Furniture.FurnitureTeleportLinkEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<int>("FurnitureEntityOneId")
                        .HasColumnType("int")
                        .HasColumnName("furniture_one_id");

                    b.Property<int>("FurnitureEntityTwoId")
                        .HasColumnType("int")
                        .HasColumnName("furniture_two_id");

                    b.HasKey("Id");

                    b.HasIndex("FurnitureEntityOneId")
                        .IsUnique();

                    b.HasIndex("FurnitureEntityTwoId")
                        .IsUnique();

                    b.ToTable("furniture_teleport_links");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Navigator.NavigatorEventCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("navigator_event_categories");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Players.PlayerBadgeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("BadgeCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("badge_code");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<int>("PlayerEntityId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int?>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    b.HasKey("Id");

                    b.HasIndex("PlayerEntityId", "BadgeCode")
                        .IsUnique();

                    b.ToTable("player_badges");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Players.PlayerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<string>("Figure")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasColumnName("figure")
                        .HasDefaultValueSql("'hr-115-42.hd-195-19.ch-3030-82.lg-275-1408.fa-1201.ca-1804-64'");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gender")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Motto")
                        .HasColumnType("longtext")
                        .HasColumnName("motto");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("players");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Players.PlayerSettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<int>("PlayerEntityId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.HasKey("Id");

                    b.HasIndex("PlayerEntityId")
                        .IsUnique();

                    b.ToTable("player_settings");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomBanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<int>("PlayerEntityId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("RoomEntityId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("PlayerEntityId");

                    b.HasIndex("RoomEntityId", "PlayerEntityId")
                        .IsUnique();

                    b.ToTable("room_bans");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("AllowEditing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_editing")
                        .HasDefaultValueSql("1");

                    b.Property<bool?>("AllowPets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_pets")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("AllowPetsEat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_pets_eat")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("AllowWalkThrough")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_walk_through")
                        .HasDefaultValueSql("1");

                    b.Property<int>("BanType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ban_type")
                        .HasDefaultValueSql("0");

                    b.Property<int>("ChatDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_distance")
                        .HasDefaultValueSql("50");

                    b.Property<int>("ChatModeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_mode_type")
                        .HasDefaultValueSql("0");

                    b.Property<int>("ChatProtectionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_protection_type")
                        .HasDefaultValueSql("2");

                    b.Property<int>("ChatSpeedType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_speed_type")
                        .HasDefaultValueSql("1");

                    b.Property<int>("ChatWeightType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_weight_type")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool?>("HideWalls")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("hide_walls")
                        .HasDefaultValueSql("0");

                    b.Property<int>("KickType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("kick_type")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("LastActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_active");

                    b.Property<int>("MuteType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("mute_type")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<double>("PaintFloor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("paint_floor")
                        .HasDefaultValueSql("0");

                    b.Property<double>("PaintLandscape")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("paint_landscape")
                        .HasDefaultValueSql("0");

                    b.Property<double>("PaintWall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("paint_wall")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int>("PlayerEntityId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("RoomModelEntityId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<int>("RoomState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("state")
                        .HasDefaultValueSql("0");

                    b.Property<int>("ThicknessFloor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("thickness_floor")
                        .HasDefaultValueSql("0");

                    b.Property<int>("ThicknessWall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("thickness_wall")
                        .HasDefaultValueSql("0");

                    b.Property<int>("TradeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("trade_type")
                        .HasDefaultValueSql("0");

                    b.Property<int>("UsersMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("users_max")
                        .HasDefaultValueSql("25");

                    b.Property<int>("UsersNow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("users_now")
                        .HasDefaultValueSql("0");

                    b.Property<int>("WallHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("wall_height")
                        .HasDefaultValueSql("-1");

                    b.HasKey("Id");

                    b.HasIndex("PlayerEntityId");

                    b.HasIndex("RoomModelEntityId");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomModelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("Custom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("custom")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<int>("DoorRotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("door_rotation")
                        .HasDefaultValueSql("0");

                    b.Property<int>("DoorX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("door_x")
                        .HasDefaultValueSql("0");

                    b.Property<int>("DoorY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("door_y")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("room_models");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomMuteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<int>("PlayerEntityId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("RoomEntityId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("PlayerEntityId");

                    b.HasIndex("RoomEntityId", "PlayerEntityId")
                        .IsUnique();

                    b.ToTable("room_mutes");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomRightEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<int>("PlayerEntityId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("RoomEntityId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("PlayerEntityId");

                    b.HasIndex("RoomEntityId", "PlayerEntityId")
                        .IsUnique();

                    b.ToTable("room_rights");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Security.SecurityTicketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_updated");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ip_address");

                    b.Property<bool?>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_locked")
                        .HasDefaultValueSql("0");

                    b.Property<int>("PlayerEntityId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<string>("Ticket")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ticket");

                    b.HasKey("Id");

                    b.HasIndex("PlayerEntityId")
                        .IsUnique();

                    b.HasIndex("Ticket")
                        .IsUnique();

                    b.ToTable("security_tickets");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Furniture.FurnitureEntity", b =>
                {
                    b.HasOne("Turbo.Database.Entities.Furniture.FurnitureDefinitionEntity", "FurnitureDefinitionEntity")
                        .WithMany("Furnitures")
                        .HasForeignKey("FurnitureDefinitionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turbo.Database.Entities.Players.PlayerEntity", "PlayerEntity")
                        .WithMany("Furniture")
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turbo.Database.Entities.Room.RoomEntity", "RoomEntity")
                        .WithMany()
                        .HasForeignKey("RoomEntityId");

                    b.Navigation("FurnitureDefinitionEntity");

                    b.Navigation("PlayerEntity");

                    b.Navigation("RoomEntity");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Furniture.FurnitureTeleportLinkEntity", b =>
                {
                    b.HasOne("Turbo.Database.Entities.Furniture.FurnitureEntity", "FurnitureEntityOne")
                        .WithMany()
                        .HasForeignKey("FurnitureEntityOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turbo.Database.Entities.Furniture.FurnitureEntity", "FurnitureEntityTwo")
                        .WithMany()
                        .HasForeignKey("FurnitureEntityTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FurnitureEntityOne");

                    b.Navigation("FurnitureEntityTwo");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Players.PlayerBadgeEntity", b =>
                {
                    b.HasOne("Turbo.Database.Entities.Players.PlayerEntity", "PlayerEntity")
                        .WithMany("PlayerBadges")
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerEntity");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Players.PlayerSettingsEntity", b =>
                {
                    b.HasOne("Turbo.Database.Entities.Players.PlayerEntity", "PlayerEntity")
                        .WithOne("PlayerSettings")
                        .HasForeignKey("Turbo.Database.Entities.Players.PlayerSettingsEntity", "PlayerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerEntity");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomBanEntity", b =>
                {
                    b.HasOne("Turbo.Database.Entities.Players.PlayerEntity", "PlayerEntity")
                        .WithMany("RoomBans")
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turbo.Database.Entities.Room.RoomEntity", "RoomEntity")
                        .WithMany("RoomBans")
                        .HasForeignKey("RoomEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerEntity");

                    b.Navigation("RoomEntity");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomEntity", b =>
                {
                    b.HasOne("Turbo.Database.Entities.Players.PlayerEntity", "PlayerEntity")
                        .WithMany("Rooms")
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turbo.Database.Entities.Room.RoomModelEntity", "RoomModelEntity")
                        .WithMany()
                        .HasForeignKey("RoomModelEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerEntity");

                    b.Navigation("RoomModelEntity");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomMuteEntity", b =>
                {
                    b.HasOne("Turbo.Database.Entities.Players.PlayerEntity", "PlayerEntity")
                        .WithMany("RoomMutes")
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turbo.Database.Entities.Room.RoomEntity", "RoomEntity")
                        .WithMany("RoomMutes")
                        .HasForeignKey("RoomEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerEntity");

                    b.Navigation("RoomEntity");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomRightEntity", b =>
                {
                    b.HasOne("Turbo.Database.Entities.Players.PlayerEntity", "PlayerEntity")
                        .WithMany("RoomRights")
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turbo.Database.Entities.Room.RoomEntity", "RoomEntity")
                        .WithMany("RoomRights")
                        .HasForeignKey("RoomEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerEntity");

                    b.Navigation("RoomEntity");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Security.SecurityTicketEntity", b =>
                {
                    b.HasOne("Turbo.Database.Entities.Players.PlayerEntity", "PlayerEntity")
                        .WithMany("SecurityTickets")
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerEntity");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Furniture.FurnitureDefinitionEntity", b =>
                {
                    b.Navigation("Furnitures");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Players.PlayerEntity", b =>
                {
                    b.Navigation("Furniture");

                    b.Navigation("PlayerBadges");

                    b.Navigation("PlayerSettings");

                    b.Navigation("RoomBans");

                    b.Navigation("RoomMutes");

                    b.Navigation("RoomRights");

                    b.Navigation("Rooms");

                    b.Navigation("SecurityTickets");
                });

            modelBuilder.Entity("Turbo.Database.Entities.Room.RoomEntity", b =>
                {
                    b.Navigation("RoomBans");

                    b.Navigation("RoomMutes");

                    b.Navigation("RoomRights");
                });
#pragma warning restore 612, 618
        }
    }
}
